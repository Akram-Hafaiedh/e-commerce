generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   String?
  avatar    String?
  isActive  Boolean    @default(true)
  lastLogin DateTime?
  phone     String?
  cartItems CartItem[]
  orders    Order[]

  @@map("users")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  image         String
  slug          String      @unique
  featured      Boolean     @default(false)
  onSale        Boolean     @default(false)
  rating        Float?
  reviewCount   Int         @default(0)
  stock         Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  categoryId    String
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String
  image       String
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Order {
  id                String      @id @default(cuid())
  date              DateTime    @default(now())
  status            OrderStatus @default(PROCESSING)
  total             Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  shippingFirstName String
  shippingLastName  String
  shippingAddress   String
  shippingCity      String
  shippingZipCode   String
  shippingCountry   String
  paymentCardEnding String
  paymentExpiryDate String
  userId            String
  items             OrderItem[]
  user              User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PENDING
}
