// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  cartItems CartItem[]

  @@map("users")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  image         String
  slug          String   @unique
  featured      Boolean  @default(false)
  onSale        Boolean  @default(false)
  rating        Float?
  reviewCount   Int      @default(0)
  stock         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  image       String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Order {
  id        String      @id @default(cuid())
  date      DateTime    @default(now())
  status    OrderStatus @default(PROCESSING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Shipping Address (embedded)
  shippingFirstName String
  shippingLastName  String
  shippingAddress   String
  shippingCity      String
  shippingZipCode   String
  shippingCountry   String

  // Payment Method (embedded)
  paymentCardEnding String
  paymentExpiryDate String

  // Relations
  userId String
  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float // Price at time of order

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // Prevent duplicate cart items
  @@map("cart_items")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
