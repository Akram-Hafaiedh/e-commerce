generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   String?
  avatar    String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  phone     String?
  cart      Cart? // One-to-one relationship
  orders    Order[]

  @@map("users")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  image         String
  slug          String   @unique
  featured      Boolean  @default(false)
  onSale        Boolean  @default(false)
  rating        Float?
  reviewCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  categoryId    String

  cartItems      CartItem[]
  orderItems     OrderItem[]
  category       Category        @relation(fields: [categoryId], references: [id])
  stockMovements StockMovement[]
  Inventory      Inventory[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  image       String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parentId String? // Optional self-relation for subcategories
  parent   Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToSubcategories")
  products Product[]

  @@map("categories")
}

model Order {
  id                String      @id @default(cuid())
  date              DateTime    @default(now())
  status            OrderStatus @default(PROCESSING)
  total             Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  shippingFirstName String
  shippingLastName  String
  shippingAddress   String
  shippingCity      String
  shippingZipCode   String
  shippingCountry   String
  paymentCardEnding String
  paymentExpiryDate String
  userId            String?
  guestEmail        String?
  orderNumber       String      @unique // Human-readable order number
  items             OrderItem[]
  cart              Cart?       @relation(fields: [cartId], references: [id])
  user              User?       @relation(fields: [userId], references: [id])
  cartId            String?

  @@map("orders")
}

model OrderItem {
  id          String     @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float
  product     Product    @relation(fields: [productId], references: [id])
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  warehouseId String?
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String     @id @default(cuid())
  quantity  Int        @default(1)
  cartId    String
  productId String
  status    CartStatus @default(ACTIVE)
  cart      Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id])
  createdAt DateTime   @default(now())

  @@unique([cartId, productId])
  @@index([cartId, status])
  @@map("cart_items")
}

model Warehouse {
  id         String        @id @default(cuid())
  name       String
  code       String        @unique
  address    String
  city       String
  country    String
  postalCode String
  type       WarehouseType @default(MAIN)
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  stockMovements StockMovement[]
  inventory      Inventory[]
  OrderItem      OrderItem[]

  @@map("warehouses")
}

model Inventory {
  id           String   @id @default(cuid())
  productId    String
  warehouseId  String
  quantity     Int      @default(0)
  minStock     Int?     @default(10)
  maxStock     Int?
  reorderPoint Int?     @default(20)
  lastUpdated  DateTime @default(now())

  // Relations
  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@map("inventory")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique // Optional - null for guest carts
  sessionId String?    @unique // For guest users
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  Order     Order[]

  @@map("carts")
}

model StockMovement {
  id           String       @id @default(cuid())
  productId    String
  warehouseId  String
  quantity     Int
  stockAfter   Int
  movementType MovementType
  referenceId  String?
  note         String?
  createdAt    DateTime     @default(now())
  createdBy    String?

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@map("stock_movements")
}

model Subscriber {
  id             String    @id @default(cuid())
  email          String    @unique
  isActive       Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([isActive])
  @@index([subscribedAt])
}

model Campaign {
  id             String   @id @default(cuid())
  title          String
  message        String   @db.Text
  recipientCount Int
  sentAt         DateTime @default(now())
  createdAt      DateTime @default(now())

  @@index([sentAt])
}

enum MovementType {
  SALE
  RETURN
  RESTOCK
  ADJUSTMENT
  RESERVATION
  RELEASE
  TRANSFER_IN
  TRANSFER_OUT
  DAMAGED
}

enum WarehouseType {
  MAIN
  REGIONAL
  STORE
  VIRTUAL
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PENDING
}

enum UserRole {
  USER
  ADMIN
}

enum CartStatus {
  ACTIVE
  SAVED_FOR_LATER
  PURCHASED
  ABANDONED
}
